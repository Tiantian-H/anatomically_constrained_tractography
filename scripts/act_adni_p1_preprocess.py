#!/usr/bin/env python3
# 
# Network spreading models using personalised (age/gender-matched) connectomes 
# from PPMI healthy controls for anatomically constrained tractography
#
# ACT prep (MRTrix3 pipeline)
#
# Prerequisite: walk through act_ppmi_0_prep.py
#
# Neil Oxtoby, February 2020

import os,subprocess,glob
import pandas as pd

#* Name of CSV file containing image file paths and IDs: generated by act_adni_0_prep.py
csv_input_file = 'act_adni_filepaths.csv'

#* File locations
top_folder = '***your_directoy***/anatomically_constrained_tractography' # please replace ***your_directoy*** with your own one
data_folder = os.path.join(top_folder,'ADNI')
act_folder  = os.path.normpath(os.path.join(data_folder,'act'))
dMRI_folder = os.path.normpath(os.path.join(act_folder,'dMRI'))
sMRI_folder = os.path.normpath(os.path.join(act_folder,'sMRI'))
json_folder = os.path.normpath(os.path.join(act_folder,'json'))
csv_input_path = os.path.join(top_folder,csv_input_file)
act_csv_path = os.path.join(act_folder,'act_adni.csv')

#* Preprocessing functions copied from my connectome pipeline
wd = os.path.join(top_folder,'scripts')
os.chdir(wd)
from act_utilities import *

#* Preprocessing output folders
denoise_tail = '_denoised'
preproc_tail = '_preproc'
biascorrect_tail = '_biascorrect'
dMRI_tails = [denoise_tail,preproc_tail,biascorrect_tail]
dMRI_preproc_folders = [os.path.join(act_folder,'dMRI%s' % d) for d in dMRI_tails]
reg_tail = '_reg'
sMRI_reg_folder      =  os.path.join(act_folder,'sMRI%s' % reg_tail)
make_sure_path_exists(sMRI_reg_folder)
for f in dMRI_preproc_folders:
    make_sure_path_exists(f)

os.chdir(act_folder)


#####################################################################################################
############ Prep: check for dependencies, convert dMRI to MIF, prepare output DataFrame ############
#* Check for dependencies: ANTS, etc.
depCheckVal = checkForDependencies()
if depCheckVal!=0:
    print('ERROR: missing dependency {0}'.format(depCheckVal))
    print('see checkForDependencies() function for details')
    sys.exit(depCheckVal)
#* DataFrame for ACT files
if os.path.exists(act_csv_path):
    df = pd.read_csv(act_csv_path)
else:
    df_act = pd.read_csv(csv_input_path)
    df_act_sMRI = df_act.loc[df_act["Modality"]=='sMRI'].sort_values(by='Subject ID').reset_index(drop=True)
    df_act_dMRI = df_act.loc[df_act["Modality"]=='dMRI'].sort_values(by='Subject ID').reset_index(drop=True)
    col_preproc = "Path preprocessed"
    #* Match sMRI to dMRI using Subject ID
    cols = ["Subject ID","Path"]
    df_act_sMRI = df_act_sMRI[cols].rename(columns={"Path": "Path_sMRI"})
    df_act_dMRI = df_act_dMRI[cols].rename(columns={"Path": "Path_dMRI"})
    df = pd.merge(df_act_sMRI,df_act_dMRI)
    df["Preprocessed"] = False
#* dMRI: convert NII to MIF, with embedded b-values and b-vectors (and other metadata from json, including Phase Encoding Direction)
for i in df.index.values:
    sMRI = df.at[i,'Path_sMRI']
    dMRI = df.at[i,'Path_dMRI']
    dMRI_mif = dMRI.replace('.nii.gz','.mif')
    json_file = os.path.join(json_folder,os.path.basename(dMRI).replace('.nii.gz','.json'))
    #* Convert to MRtrix image format (MIF), with embedded b-values and b-vectors
    if not os.path.isfile(dMRI_mif):
        bvec = dMRI.replace('.nii.gz','.bvec')
        bval = dMRI.replace('.nii.gz','.bval')
        mrconvert_check = subprocess.run(['mrconvert','-json_import',json_file,'-fslgrad',bvec,bval,dMRI,dMRI_mif])
        #rm_check = subprocess.run(['rm',bvec,bval,dMRI])
    df.at[i,"Path_dMRI"] = dMRI_mif
#* Write ACT preprocessing status and results (file locations) to CSV
df.to_csv(act_csv_path,index=False)
#>>>>>>>>>>>> I fixed a missing file. Keeping the code here for future reference
# #* One DWI file was missing bvals/bvecs files, so I manually downloaded an alternative (same participant, earlier visit)
# patno = "3855"
# i = df.loc[df["Subject ID"]==3855].index.values[0]
# #* FIXME: Remove existing files (did it manually)
# # o = subprocess.run(['rm',os.path.join(sMRI_folder,patno+"*")])
# # o = subprocess.run(['rm',os.path.join(dMRI_folder,patno+"*")])
# zipfile = "/Users/noxtoby/Documents/EuroPOND-WP8-NetworkModels/tractography/PPMI/zips/PPMI-for-CJD-missing_grad.zip"
# o = subprocess.run(['open',zipfile])
# new_dicom_dMRI = "/Users/noxtoby/Documents/EuroPOND-WP8-NetworkModels/tractography/PPMI/zips/PPMI/3855/DTI_gated/2012-07-24_08_47_28.0/S204392"
# new_dicom_sMRI = "/Users/noxtoby/Documents/EuroPOND-WP8-NetworkModels/tractography/PPMI/zips/PPMI/3855/MPRAGE_GRAPPA/2012-07-24_08_38_32.0/S204393"
# nifti_folder = os.path.join(data_folder,'nifti')
# o = subprocess.run(['dcm2niix','-o',nifti_folder,'-f','%i_%t_%s_%p','-z','y',new_dicom_sMRI])
# o = subprocess.run(['dcm2niix','-o',nifti_folder,'-f','%i_%t_%s_%p','-z','y',new_dicom_dMRI])
# #* Convert dMRI to MIF, move to dMRI folder, delete old file
# old_dMRI = df.at[i,'Path_dMRI']
# new_dMRI_nifti = os.path.join(nifti_folder,"3855_20120724083832_2_DTI_gated.nii.gz")
# bval = new_dMRI_nifti.replace('.nii.gz','.bval')
# bvec = new_dMRI_nifti.replace('.nii.gz','.bvec')
# json_file = new_dMRI_nifti.replace('.nii.gz','.json')
# new_dMRI_mif = os.path.join(dMRI_folder,os.path.basename(new_dMRI_nifti)).replace('.nii.gz','.mif')
# mrconvert_check = subprocess.run(['mrconvert','-json_import',json_file,'-fslgrad',bvec,bval,new_dMRI_nifti,new_dMRI_mif])
# #* Move sMRI
# old_sMRI = df.at[i,'Path_sMRI']
# new_sMRI = os.path.join(nifti_folder,"3855_20120724083832_9_MPRAGE_GRAPPA.nii.gz")
# new_sMRI_loc = os.path.join(sMRI_folder,os.path.basename(new_sMRI))
# o = subprocess.run(['mv',new_sMRI,new_sMRI_loc])
# #* Fix paths for the new files
# df.at[i,"Path_dMRI"] = new_dMRI_mif
# df.at[i,"Path_sMRI"] = new_sMRI_loc
# df["Path_sMRI"] = df["Path_sMRI"].map(lambda x: x.split('.')[0] + '.nii.gz')
#<<<<<<<<<<<<
#####################################################################################################




#####################################################################################################
############ Preprocessing ############
#* Steps: 1. preprocess_dMRI => bias corrected dMRI
#*        2. register sMRI to dMRI_biascorrected
#* Cluster:
#*        3. run GIF3 on sMRI_registered
#*        4. ACT stuff: 5TT, nodes / WM_FODs (response functions & CSD)
#*        5. mtnormalise
#*        6. Tractography
#*        7. Connectomes
preproc_bool = True

# It might be prudent to use the cluster for this (DWI bias correction takes ages!)
#   => a) copy dMRI and sMRI folders onto cluster
#      b) run act_utilities.preprocess_individual() OR a version of act_utilities.preprocess_dMRI() and .preprocess_sMRI()

new_column_dMRI = 'Path_dMRI_biascorrected'
new_column_sMRI = 'Path_sMRI_registered'

#****** Local batch preprocessing using multicore CPU
n_cpus = 4

# replace dwifslpreproc with dwipreproc:
# dwipreproc no longer exists in the latest version of MRtrix3: The dwifslpreproc script, responsible for performing general pre-processing of DWI series, has been completely re-designed as part of the MRtrix3 3.0_RC1 update, according to https://mrtrix.readthedocs.io/en/latest/dwi_preprocessing/dwifslpreproc.html
#* mrtrix3: dwidenoise => dwifslpreproc (-rpe_header)
# change all the following foreach into for_each due to the modification in the latest MRtrix3 version
# change  all the following -i to -nthreads

batch_cmd = [
    'for_each', 
    'dMRI/*.mif','-nthreads','%i' % n_cpus,':',
    'dwidenoise','IN','dMRI{0}/PRE{0}.mif'.format(denoise_tail),
    '"&&"',
    'dwifslpreproc','-rpe_header','dMRI{0}/PRE{0}.mif'.format(denoise_tail),'dMRI{0}/PRE{0}.mif'.format(preproc_tail)
]

if preproc_bool:
    for_each_check = os.system(' '.join(batch_cmd)) # Subprocess doesn't work! subprocess.run(batch_cmd) FIXME???
#* mrtrix3: dwibiascorrect
# change -ants into ants since the command doesn't use - symbol anymore in the latest MRtrix3 version

batch_cmd = [
    'for_each',
    'dMRI%s/*.mif' % preproc_tail,'-nthreads','%i' % n_cpus,':',
    'dwibiascorrect','ants','IN','dMRI{0}/PRE{0}.mif'.format(biascorrect_tail)
]

if preproc_bool:
    for_each_check = os.system(' '.join(batch_cmd))

#* niftyreg: register sMRI to biascorrected dMRI
indices = df.index.values
cnt = 0
for i in indices:
    cnt += 1
    if not df.at[i,"Preprocessed"]:
        sMRI = df.at[i,'Path_sMRI']
        dMRI = df.at[i,'Path_dMRI']
        dMRI_denoised    = dMRI.replace('dMRI','dMRI%s' % denoise_tail).replace('.mif','%s.mif' % denoise_tail)
        dMRI_preproc     = dMRI.replace('dMRI','dMRI%s' % preproc_tail).replace('.mif','%s.mif' % preproc_tail)
        dMRI_biascorrect = dMRI.replace('dMRI','dMRI%s' % biascorrect_tail).replace('.mif','%s%s.mif' % (preproc_tail,biascorrect_tail))
        sMRI_reg = sMRI.replace('sMRI','sMRI%s' % reg_tail)
        print('************\n%i of %i - Preprocessing %s and %s ' % (cnt,len(indices),os.path.basename(dMRI),os.path.basename(sMRI)))
        #* Serial preprocessing: (dMRI_denoised,dMRI_preproc,dMRI_biascorrected,sMRI_reg,reg_aladin_output_transform) = preprocess_individual(dMRI_mif,sMRI)
        
        #* register sMRI to biascorrected dMRI
        if os.path.exists(dMRI_biascorrect):
            (reg_aladin_check,sMRI_reg,reg_aladin_output_transform) = reg_sMRI_to_dMRI(sMRI,dMRI_biascorrect)
            #*** Save to DataFrame
            df.at[i,new_column_dMRI] = dMRI_biascorrect
            df.at[i,new_column_sMRI] = sMRI_reg
            df.at[i,"Preprocessed"] = True
        else:
            print("Could not find bias-corrected file: %s " % dMRI_biascorrect)
            print(" >>> registration not performed")
            df.at[i,"Preprocessed"] = False
        #* Update CSV
        df.to_csv(act_csv_path,index=False)
    else:
        print("Files already preprocessed: %s, %s " % (os.path.basename(dMRI),os.path.basename(sMRI)))
